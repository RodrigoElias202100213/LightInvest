@model LightInvest.Models.SimulacaoCompletaViewModel

@{
    ViewBag.Title = "Simulação Completa";

    // Dados do ROI (histórico) – usados no gráfico de ROI original
    var roiLabels = Model.ROI.History
                        .OrderBy(h => h.DataCalculado)
                        .Select(h => h.DataCalculado.ToString("dd/MM/yyyy"))
                        .ToList();
    var roiValues = Model.ROI.History
                        .OrderBy(h => h.DataCalculado)
                        .Select(h => h.ROI)
                        .ToList();

    // Dados do saldo acumulado – utilizados para mostrar a evolução da dívida
    var saldoLabels = new List<string>();
    var saldoValues = new List<decimal>();
    foreach (var ano in Model.RetornoInvestimentoPorAno.OrderBy(a => a.Ano))
    {
        foreach (var mes in ano.Meses)
        {
            saldoLabels.Add($"{ano.Ano} - {mes.Mes}");
            saldoValues.Add(mes.SaldoRestante);
        }
    }

    // Dados para o gráfico de detalhamento mensal (consumo e custo)
    var consumoMensalLabels = Model.ResultadoTarifaViewModel.ConsumoMensal
                                .Select(cm => cm.Mes)
                                .ToList();
    var consumoMensalValues = Model.ResultadoTarifaViewModel.ConsumoMensal
                                .Select(cm => cm.Consumo)
                                .ToList();
    var custoMensalValues = Model.ResultadoTarifaViewModel.ConsumoMensal
                                .Select(cm => cm.Custo)
                                .ToList();

    // Dados para gráfico comparativo de consumo (Semana vs Fim de Semana)
    var consumoComparativoLabels = new string[] { "Média Semana", "Média Fim de Semana" };
    var consumoComparativoValues = new decimal[] { Model.EnergyConsumptionViewModel.MediaSemana, Model.EnergyConsumptionViewModel.MediaFimSemana };

    // Cálculos adicionais utilizando dados de instalação:
    var potenciaPainel = Model.DadosInstalacao.Potencia.Potencia;
    var numeroPaineis = Model.DadosInstalacao.NumeroPaineis;
    var energiaGeradaMensal = (potenciaPainel * numeroPaineis * 5m * 30m) / 1000m;
    var economiaMensal = energiaGeradaMensal * Model.TarifaViewModel.PrecoKWh;
    var mediaConsumoMensal = Model.ResultadoTarifaViewModel.ConsumoMensal.Any() ?
                             Model.ResultadoTarifaViewModel.ConsumoMensal.Average(cm => cm.Consumo) : 0;
}

<div class="container">
    <div class="sidebar">
        <div class="steps">
            <div class="step">1</div>
            <div class="step">2</div>
            <div class="step">3</div>
            <div class="step">4</div>
        </div>
    </div>
    <div class="content">
        <h2>Simulação Completa</h2>

        <!-- Seção: Consumo de Energia -->
        <section class="section">
            <h3>1. Consumo de Energia</h3>
            <div class="info-box">
                <p><strong>Média durante a Semana:</strong> @Model.EnergyConsumptionViewModel.MediaSemana kWh</p>
                <p><strong>Média durante o Fim de Semana:</strong> @Model.EnergyConsumptionViewModel.MediaFimSemana kWh</p>
                <p><strong>Média Anual:</strong> @Model.EnergyConsumptionViewModel.MediaAnual kWh</p>
                <p><strong>Consumo Total:</strong> @Model.EnergyConsumptionViewModel.ConsumoTotal kWh</p>
                <p><strong>Meses de Ocupação:</strong></p>
                <ul>
                    @foreach (var mes in Model.EnergyConsumptionViewModel.MesesOcupacao)
                    {
                        <li>@mes</li>
                    }
                </ul>
            </div>
            <div class="chart-container small-chart">
                <canvas id="consumoComparativoChart" width="250" height="250"></canvas>
            </div>
        </section>

        <!-- Seção: Tarifa -->
        <section class="section">
            <h3>2. Tarifa</h3>
            <div class="info-box">
                <p><strong>Tipo de Tarifa:</strong> @Model.TarifaViewModel.TipoDeTarifaEscolhida</p>
                <p><strong>Preço do kWh:</strong> @Model.TarifaViewModel.PrecoKWh.ToString("C") (em €)</p>
            </div>
        </section>

        <!-- Seção: Detalhamento Mensal -->
        <section class="section">
            <h3>3. Detalhamento Mensal (Consumo e Custo)</h3>
            <table class="table">
                <thead>
                    <tr>
                        <th>Mês</th>
                        <th>Consumo (kWh)</th>
                        <th>Custo (€)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var mesConsumo in Model.ResultadoTarifaViewModel.ConsumoMensal)
                    {
                        <tr>
                            <td>@mesConsumo.Mes</td>
                            <td>@mesConsumo.Consumo</td>
                            <td>@mesConsumo.Custo.ToString("C")</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="chart-container">
                <canvas id="detalhamentoMensalChart" width="800" height="400"></canvas>
            </div>
        </section>

        <!-- Seção: Dados de Instalação -->
        <section class="section">
            <h3>4. Dados de Instalação</h3>
            <div class="row">
                <div class="col-md-6">
                    <p><strong>Cidade:</strong> @Model.DadosInstalacao.Cidade.Nome</p>
                    <p><strong>Modelo do Painel:</strong> @Model.DadosInstalacao.ModeloPainel.ModeloNome</p>
                    <p><strong>Potência:</strong> @Model.DadosInstalacao.Potencia.Potencia W</p>
                </div>
                <div class="col-md-6">
                    <p><strong>Número de Painéis:</strong> @Model.DadosInstalacao.NumeroPaineis</p>
                    <p><strong>Inclinação:</strong> @Model.DadosInstalacao.Inclinacao°</p>
                    <p><strong>Dificuldade:</strong> @Model.DadosInstalacao.Dificuldade</p>
                    <p><strong>Preço da Instalação:</strong> € @Model.DadosInstalacao.PrecoInstalacao.ToString("N2")</p>
                </div>
            </div>
        </section>

        <!-- Seção: Retorno do Investimento (ROI) -->
        <section class="section">
            <h3>5. Retorno do Investimento (ROI)</h3>
            <div class="info-box">
                <p><strong>Custo da Instalação:</strong> € @Model.ROI.CurrentRoi.CustoInstalacao.ToString("N2")</p>
                <p><strong>Economia Anual Estimada:</strong> € @Model.ROI.CurrentRoi.RetornoEconomia.ToString("N2")</p>
                <p><strong>Tempo de Retorno Estimado:</strong> @Model.ROI.CurrentRoi.ROI.ToString("N1") anos</p>
            </div>
            <!-- Novo Gráfico: Evolução da Dívida (ROI ao longo do tempo) -->
            <div class="chart-container">
                <canvas id="roiDebtChart" width="800" height="400"></canvas>
            </div>
        </section>

        <!-- Gráfico: Histórico do ROI -->
        <section class="section">
            <h3 class="text-center">Histórico do ROI</h3>
            <div class="chart-container text-center">
                <canvas id="roiChart" width="800" height="400"></canvas>
            </div>
        </section>

        <!-- Gráfico: Evolução do Saldo Acumulado -->
        <section class="section">
            <h3 class="text-center">Evolução do Saldo Acumulado</h3>
            <div class="chart-container text-center">
                <canvas id="saldoChart" width="800" height="400"></canvas>
            </div>
        </section>

        <!-- Seção: Informações Adicionais -->
        <section class="section">
            <h3>8. Informações Adicionais</h3>
            <div class="info-box">
                <p><strong>Potência do Painel:</strong> @potenciaPainel W</p>
                <p><strong>Número de Painéis:</strong> @numeroPaineis</p>
                <p><strong>Energia Gerada Mensal:</strong> @energiaGeradaMensal kWh</p>
                <p><strong>Economia Mensal:</strong> € @economiaMensal.ToString("N2")</p>
                <p><strong>Média de Consumo Mensal:</strong> @mediaConsumoMensal kWh</p>
            </div>
            <div class="chart-container">
                <canvas id="energiaVsConsumoChart" width="800" height="400"></canvas>
            </div>
        </section>

        <!-- Botões de Exportação e Navegação -->
        <div id="btn-container">
            <a href="@Url.Action("ExportPDF", "SimulacaoValores")" class="btn">Exportar PDF</a>
            <a href="@Url.Action("ExportCSV", "SimulacaoValores")" class="btn">Exportar CSV</a>
            <a href="@Url.Action("ExportExcel", "SimulacaoValores")" class="btn">Exportar Excel</a>
<<<<<<< HEAD
=======
            <a href="@Url.Action("MostrarImagem", "SimulacaoValores")" class="btn">Quazyyy</a>

>>>>>>> backup
            <a href="@Url.Action("Create", "DadosInstalacao")" class="btn">Anterior</a>
            <a href="@Url.Action("Index", "Home")" class="btn">Página Inicial</a>
        </div>
    </div>
</div>

<!-- Modal para exibir informações detalhadas dos gráficos -->
<div class="modal fade" id="infoModal" tabindex="-1" role="dialog" aria-labelledby="modalTitle" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitle"></h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Fechar">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body" id="modalBody">
                <!-- Conteúdo será preenchido via JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal">Fechar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Inclua os scripts do Bootstrap se ainda não estiverem incluídos -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        // Gráfico Comparativo: Consumo Semana vs Fim de Semana (Doughnut)
        var ctxComparativo = document.getElementById('consumoComparativoChart').getContext('2d');
        new Chart(ctxComparativo, {
            type: 'doughnut',
            data: {
                labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(consumoComparativoLabels)),
                datasets: [{
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(consumoComparativoValues)),
                    backgroundColor: ['rgba(54, 162, 235, 0.6)', 'rgba(255, 99, 132, 0.6)'],
                    borderColor: ['rgba(54, 162, 235, 1)', 'rgba(255, 99, 132, 1)'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                animation: { animateScale: true },
                plugins: { legend: { position: 'bottom' }, tooltip: { enabled: true } }
            }
        });

        // Gráfico: Detalhamento Mensal (Consumo e Custo)
        var ctxDetalhamento = document.getElementById('detalhamentoMensalChart').getContext('2d');
        new Chart(ctxDetalhamento, {
            type: 'bar',
            data: {
                labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(consumoMensalLabels)),
                datasets: [
                    {
                        label: 'Consumo (kWh)',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(consumoMensalValues)),
                        backgroundColor: 'rgba(75, 192, 192, 0.6)',
                        yAxisID: 'y1'
                    },
                    {
                        label: 'Custo (€)',
                        data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(custoMensalValues)),
                        type: 'line',
                        borderColor: 'rgba(153, 102, 255, 1)',
                        backgroundColor: 'rgba(153, 102, 255, 0.2)',
                        fill: true,
                        yAxisID: 'y2'
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    y1: {
                        type: 'linear',
                        position: 'left',
                        beginAtZero: true,
                        title: { display: true, text: 'Consumo (kWh)' }
                    },
                    y2: {
                        type: 'linear',
                        position: 'right',
                        beginAtZero: true,
                        grid: { drawOnChartArea: false },
                        title: { display: true, text: 'Custo (€)' }
                    }
                }
            }
        });

        // Gráfico: Histórico do ROI
        var ctxRoi = document.getElementById('roiChart').getContext('2d');
        new Chart(ctxRoi, {
            type: 'line',
            data: {
                labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(roiLabels)),
                datasets: [{
                    label: 'ROI (anos)',
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(roiValues)),
                    borderColor: 'rgba(153, 102, 255, 1)',
                    backgroundColor: 'rgba(153, 102, 255, 0.2)',
                    fill: true,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true, title: { display: true, text: 'ROI (anos)' } },
                    x: { title: { display: true, text: 'Data' } }
                },
                plugins: { tooltip: { mode: 'index', intersect: false } }
            }
        });

        // Novo Gráfico: Evolução da Dívida (ROI ao longo do tempo)
        var ctxRoiDebt = document.getElementById('roiDebtChart').getContext('2d');
        new Chart(ctxRoiDebt, {
            type: 'line',
            data: {
                labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(saldoLabels)),
                datasets: [{
                    label: 'Dívida Restante (€)',
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(saldoValues)),
                    borderColor: 'rgba(255, 99, 132, 1)',
                    backgroundColor: 'rgba(255, 99, 132, 0.2)',
                    fill: true,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                onClick: function(evt, activeElements) {
                    if(activeElements.length > 0){
                        var element = activeElements[0];
                        var datasetIndex = element.datasetIndex;
                        var index = element.index;
                        var label = this.data.labels[index];
                        var value = this.data.datasets[datasetIndex].data[index];
                        // Preenche o modal com informações detalhadas
                        document.getElementById("modalTitle").innerText = "Detalhes para " + label;
                        document.getElementById("modalBody").innerHTML = "<p>Dívida Restante: €" + value + "</p>";
                        $("#infoModal").modal('show');
                    }
                },
                scales: {
                    y: { beginAtZero: true, title: { display: true, text: 'Dívida Restante (€)' } },
                    x: { title: { display: true, text: 'Ano - Mês' } }
                },
                plugins: { tooltip: { mode: 'index', intersect: false } }
            }
        });

        // Gráfico: Evolução do Saldo Acumulado
        var ctxSaldo = document.getElementById('saldoChart').getContext('2d');
        new Chart(ctxSaldo, {
            type: 'line',
            data: {
                labels: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(saldoLabels)),
                datasets: [{
                    label: 'Saldo Acumulado (€)',
                    data: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(saldoValues)),
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    fill: true,
                    tension: 0.1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: false, title: { display: true, text: 'Saldo (€)' } },
                    x: { title: { display: true, text: 'Ano - Mês' } }
                },
                plugins: { tooltip: { mode: 'index', intersect: false } }
            }
        });

        // Gráfico: Energia Gerada Mensal vs Média de Consumo Mensal
        var ctxEnergiaVsConsumo = document.getElementById('energiaVsConsumoChart').getContext('2d');
        new Chart(ctxEnergiaVsConsumo, {
            type: 'bar',
            data: {
                labels: ['Energia Gerada Mensal (kWh)', 'Média Consumo Mensal (kWh)'],
                datasets: [{
                    label: 'Comparação (kWh)',
                    data: [@energiaGeradaMensal, @mediaConsumoMensal],
                    backgroundColor: ['rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)'],
                    borderColor: ['rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true, title: { display: true, text: 'kWh' } }
                }
            }
        });
    </script>
}

<!-- CSS Base importado para manter a identidade visual -->
<style>
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
    }

    nav, header {
        margin: 0;
        padding: 0;
        width: 0%;
        height: 0%;
    }

    .container {
        display: flex;
        width: 100%;
        min-height: 100vh;
    }

    .sidebar {
        width: 20%;
        background-color: #d3e1e3;
        padding: 20px;
        position: relative;
    }

    .steps {
        position: absolute;
        top: 50px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .step {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #aaa;
        color: white;
        display: flex;
        justify-content: center;
        align-items: center;
        font-weight: bold;
        margin: 30px 0;
        position: relative;
    }

        .step:first-child {
            background-color: #065A66;
        }

        .step::after {
            content: "";
            width: 2px;
            height: 80px;
            background-color: #aaa;
            position: absolute;
            bottom: -80px;
            transform: translateX(-50%);
        }

        .step:last-child::after {
            display: none;
        }

    .content {
        width: 80%;
        padding: 20px;
    }

    h2 {
        font-weight: bold;
        font-size: 3rem;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #065A66;
        text-align: center;
        margin-bottom: 4%;
    }

    .section {
        background: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        margin-bottom: 4%;
    }

    .horario {
        display: grid;
        grid-template-columns: repeat(12, 1fr);
        gap: 10px;
        row-gap: 30px;
        text-align: center;
    }

    .hora {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

        .hora input {
            width: 50px;
            text-align: center;
            border: none;
            border-bottom: 2px solid #000;
            background: transparent;
            outline: none;
            padding: 2px;
        }

    h5 {
        margin-top: 2%;
        margin-bottom: 2%;
        font-weight: bolder;
    }

    .month-checkboxes {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
        margin-top: 10px;
    }

        .month-checkboxes label {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            gap: 5px;
        }

        .month-checkboxes input {
            width: 18px;
            height: 18px;
        }

    #btn-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-top: 20px;
    }

    .btn {
        background: #065A66;
        color: white;
        padding: 10px 20px;
        border: none;
        cursor: pointer;
        border-radius: 10px;
        text-decoration: none;
        text-align: center;
    }

        .btn:hover {
            background: #065A66;
            color: white;
        }

    .chart-container {
        margin: 20px auto;
        text-align: center;
    }

    .small-chart {
        max-width: 300px;
    }

    .table {
        width: 100%;
        margin-bottom: 20px;
        border-collapse: collapse;
    }

        .table th, .table td {
            padding: 10px;
            border: 1px solid #ddd;
            text-align: center;
        }
</style>